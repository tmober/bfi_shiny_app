[{"name":"app.r","content":"# app.R â€” Big Five Inventory (BFI) Dataset Exploration App\n# -------------------------------------------------------------\n# This single-file Shiny app uses the Big Five Inventory (BFI)\n# data that ships with the `psych` package. It is designed for\n# a psychometrics course: students can explore the data, compute\n# reliability, inspect item statistics, and view item-level descriptives.\n# -------------------------------------------------------------\n\n# ---- Packages ----\nif (!requireNamespace(\"shiny\", quietly = TRUE)) install.packages(\"shiny\")\nif (!requireNamespace(\"shinythemes\", quietly = TRUE)) install.packages(\"shinythemes\")\nif (!requireNamespace(\"DT\", quietly = TRUE)) install.packages(\"DT\")\nif (!requireNamespace(\"ggplot2\", quietly = TRUE)) install.packages(\"ggplot2\")\nif (!requireNamespace(\"dplyr\", quietly = TRUE)) install.packages(\"dplyr\")\nif (!requireNamespace(\"tidyr\", quietly = TRUE)) install.packages(\"tidyr\")\nif (!requireNamespace(\"purrr\", quietly = TRUE)) install.packages(\"purrr\")\nif (!requireNamespace(\"psych\", quietly = TRUE)) install.packages(\"psych\")\n\nlibrary(shiny)\nlibrary(shinythemes)\nlibrary(DT)\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(purrr)\nlibrary(psych)\n\n# ---- Data helpers ----\nload_bfi_data <- function() {\n  df <- psych::bfi\n  names(df) <- gsub(\"\\\\.\", \"_\", make.names(names(df)))\n  df\n}\n\nget_bfi_item_columns <- function(df) {\n  grep(\"^(A|C|E|N|O)[1-9]$\", names(df), value = TRUE)\n}\n\nget_bfi_scales <- function(df) {\n  items <- get_bfi_item_columns(df)\n  list(\n    Agreeableness   = items[grepl(\"^A\", items)],\n    Conscientiousness = items[grepl(\"^C\", items)],\n    Extraversion    = items[grepl(\"^E\", items)],\n    Neuroticism     = items[grepl(\"^N\", items)],\n    Openness        = items[grepl(\"^O\", items)]\n  )\n}\n\nalpha_safe <- function(df_items) {\n  out <- try(psych::alpha(df_items, check.keys = TRUE, warnings = FALSE), silent = TRUE)\n  if (inherits(out, \"try-error\")) return(NULL) else return(out)\n}\n\nscore_scale <- function(df_items) {\n  a <- alpha_safe(df_items)\n  if (is.null(a)) return(rep(NA_real_, nrow(df_items)))\n  keys <- a$keys\n  likert_min <- suppressWarnings(min(df_items, na.rm = TRUE))\n  likert_max <- suppressWarnings(max(df_items, na.rm = TRUE))\n  df_adj <- df_items\n  if (!is.null(keys)) {\n    for (nm in names(keys)) {\n      if (!is.na(keys[[nm]]) && keys[[nm]] < 0) {\n        df_adj[[nm]] <- (likert_max + likert_min) - df_adj[[nm]]\n      }\n    }\n  }\n  rowMeans(df_adj, na.rm = TRUE)\n}\n\n# ---- UI ----\nui <- fluidPage(\n  theme = shinytheme(\"flatly\"),\n  titlePanel(\"Big Five Inventory (BFI) Dataset Exploration App\"),\n  \n  sidebarLayout(\n    sidebarPanel(width = 3,\n                 h4(\"Data\"),\n                 p(\"By default this app uses the BFI dataset included in the \", code(\"psych\"), \" package.\"),\n                 fileInput(\"file\", \"Optionally upload a CSV to replace the data\", accept = c(\".csv\")),\n                 checkboxInput(\"header\", \"CSV has header\", TRUE),\n                 selectInput(\"sep\", \"CSV separator\", c(Comma = \",\", Semicolon = \";\", Tab = \"\\t\"), \",\"),\n                 tags$hr(),\n                 \n                 h4(\"Filters\"),\n                 uiOutput(\"gender_ui\"),\n                 uiOutput(\"education_ui\"),\n                 sliderInput(\"age_range\", \"Age range\", min = 0, max = 100, value = c(10, 90), step = 1),\n                 checkboxInput(\"complete_cases\", \"Drop rows with any missing item responses\", FALSE),\n                 tags$hr(),\n                 \n                 h4(\"General\"),\n                 checkboxInput(\"zscore_items\", \"Z-score items before analyses (within current filter)\", FALSE),\n                 helpText(\"Tip: Use z-scoring to remove mean-level differences and focus on covariance structure.\"),\n                 tags$hr(),\n                 \n                 \n    ),\n    \n    mainPanel(width = 9,\n              tabsetPanel(id = \"tabs\", type = \"pills\",\n                          tabPanel(\"Documentation\",\n                                   br(),\n                                   h3(\"About the BFI dataset\"),\n                                   p(\"The \", code(\"psych::bfi\"), \" dataset contains 25 self-report items from the International Personality Item Pool (IPIP), collected via the SAPA web-based project. It includes responses from about 2,800 participants and is commonly used to demonstrate scale construction, factor analysis, and IRT.\"),\n                                   p(\"Along with the 25 items (A, C, E, N, O; five per trait), three demographics are available: \", strong(\"gender\"), \", \", strong(\"education\"), \", and \", strong(\"age\"), \".\"),\n                                   tags$ul(\n                                     tags$li(HTML(\"<b>gender<\/b>: 1 = male, 2 = female\")),\n                                     tags$li(HTML(\"<b>education<\/b>: 1 = HS, 2 = finished HS, 3 = some college, 4 = college graduate, 5 = graduate degree\")),\n                                     tags$li(HTML(\"<b>age<\/b>: years\"))\n                                   ),\n                                   br(),\n                                   h4(\"Sources\"),\n                                   tags$ul(\n                                     tags$li(tags$a(href = \"https://www.rdocumentation.org/packages/psych/versions/2.5.6/topics/bfi\", target = \"_blank\", \"RDocumentation: psych::bfi\")),\n                                     tags$li(tags$a(href = \"https://personality-project.org/r/html/bfi.html\", target = \"_blank\", \"Personality Project: bfi help page\"))\n                                   )\n                          ),\n                          \n                          tabPanel(\"Item Descriptives\",\n                                   br(),\n                                   DTOutput(\"item_desc\"), br(), textOutput(\"item_desc_note\")\n                          ),\n                          \n                          tabPanel(\"Reliability\",\n                                   br(),\n                                   fluidRow(\n                                     column(5, selectInput(\"scale\", \"Select Big Five scale\", choices = c(\"Agreeableness\", \"Conscientiousness\", \"Extraversion\", \"Neuroticism\", \"Openness\")))\n                                   ),\n                                   verbatimTextOutput(\"alpha_text\"),\n                                   DTOutput(\"alpha_table\"),\n                                   br(),\n                                   h4(\"All scales\"),\n                                   DTOutput(\"alpha_all_scales\")\n                          ),\n                          \n                          tabPanel(\"Correlations & Plots\",\n                                   br(),\n                                   fluidRow(\n                                     column(6, plotOutput(\"corr_heat\", height = 400)),\n                                     column(6, plotOutput(\"scale_hist\", height = 400))\n                                   ),\n                                   br(),\n                                   h4(\"Scatterplot matrix of Big Five scale scores\"),\n                                   p(\"Each point is a respondent. Upper triangle shows loess-smoothed trends; lower triangle shows Pearson r.\"),\n                                   plotOutput(\"pairs_scales\", height = 520)\n                          )\n              )\n    )\n  )\n)\n\n# ---- Server ----\nserver <- function(input, output, session) {\n  default_df <- load_bfi_data()\n  \n  # Panels for pairs()\n  panel.cor <- function(x, y, digits = 2, cex.cor = 1.3, ...) {\n    usr <- par(\"usr\"); on.exit(par(usr))\n    par(usr = c(0, 1, 0, 1))\n    r <- suppressWarnings(cor(x, y, use = \"pairwise.complete.obs\"))\n    txt <- formatC(r, format = \"f\", digits = digits)\n    text(0.5, 0.5, txt, cex = cex.cor)\n  }\n  panel.smooth.loess <- function(x, y, ...) {\n    points(x, y, pch = 19, cex = 0.6, col = rgb(0,0,0,0.4))\n    ok <- is.finite(x) & is.finite(y)\n    if (sum(ok) > 5) {\n      ord <- order(x[ok])\n      xs <- x[ok][ord]; ys <- y[ok][ord]\n      fit <- try(stats::loess(ys ~ xs), silent = TRUE)\n      if (!inherits(fit, \"try-error\")) {\n        xs2 <- seq(min(xs), max(xs), length.out = 200)\n        ys2 <- predict(fit, newdata = data.frame(xs = xs2))\n        lines(xs2, ys2, lwd = 2)\n      }\n    }\n  }\n  \n  raw_data <- reactive({\n    inFile <- input$file\n    if (is.null(inFile)) return(default_df)\n    read.csv(inFile$datapath, header = input$header, sep = input$sep, stringsAsFactors = FALSE)\n  })\n  \n  output$gender_ui <- renderUI({\n    df <- raw_data()\n    if (\"gender\" %in% names(df)) {\n      vals <- sort(unique(df$gender))\n      selectInput(\"gender\", \"Gender\", choices = c(\"All\" = \"all\", vals), selected = \"all\")\n    } else {\n      helpText(\"No 'gender' column detected in data.\")\n    }\n  })\n  \n  output$education_ui <- renderUI({\n    df <- raw_data()\n    if (\"education\" %in% names(df)) {\n      vals <- sort(unique(df$education))\n      selectInput(\"education\", \"Education\", choices = c(\"All\" = \"all\", vals), selected = \"all\")\n    } else {\n      helpText(\"No 'education' column detected in data.\")\n    }\n  })\n  \n  filtered_data <- reactive({\n    df <- raw_data()\n    if (\"age\" %in% names(df)) df$age <- suppressWarnings(as.numeric(df$age))\n    if (\"gender\" %in% names(df) && !is.null(input$gender) && input$gender != \"all\") {\n      df <- df %>% filter(.data$gender == input$gender)\n    }\n    if (\"education\" %in% names(df) && !is.null(input$education) && input$education != \"all\") {\n      df <- df %>% filter(.data$education == input$education)\n    }\n    if (\"age\" %in% names(df) && !any(is.na(input$age_range))) {\n      df <- df %>% filter(is.na(.data$age) | (.data$age >= input$age_range[1] & .data$age <= input$age_range[2]))\n    }\n    items <- get_bfi_item_columns(df)\n    keep <- unique(c(items, intersect(c(\"gender\", \"education\", \"age\"), names(df))))\n    df <- df[, keep, drop = FALSE]\n    if (isTRUE(input$complete_cases) && length(items) > 0) {\n      df <- df[stats::complete.cases(df[, items, drop = FALSE]), , drop = FALSE]\n    }\n    if (isTRUE(input$zscore_items) && length(items) > 0) {\n      df[, items] <- scale(df[, items])\n    }\n    df\n  })\n  \n  output$item_desc <- renderDT({\n    df <- filtered_data()\n    items <- get_bfi_item_columns(df)\n    \n    # Keep only BFI items; drop demographics\n    df_items <- df[, items, drop = FALSE]\n    df_items <- df_items[, setdiff(names(df_items), c(\"age\",\"gender\",\"education\")), drop = FALSE]\n    \n    # Coerce to numeric and clean invalid values (only allow 1-6, others -> NA)\n    for (nm in names(df_items)) {\n      x <- df_items[[nm]]\n      if (is.factor(x) || is.ordered(x)) x <- as.character(x)\n      if (is.character(x)) x <- suppressWarnings(as.numeric(x))\n      if (is.logical(x)) x <- as.numeric(x)\n      x[!(x %in% 1:6)] <- NA\n      df_items[[nm]] <- x\n    }\n    \n    if (ncol(df_items) == 0) return(datatable(data.frame(Note = \"No BFI item columns after cleaning.\")))\n    \n    # Simple descriptives without using psych::describe to avoid type/class issues\n    stats <- lapply(names(df_items), function(nm) {\n      x <- df_items[[nm]]\n      c(\n        n = sum(!is.na(x)),\n        missing = sum(is.na(x)),\n        missing_pct = round(100 * mean(is.na(x)), 2),\n        mean = round(mean(x, na.rm = TRUE), 3),\n        sd = round(stats::sd(x, na.rm = TRUE), 3),\n        median = round(stats::median(x, na.rm = TRUE), 3),\n        min = suppressWarnings(min(x, na.rm = TRUE)),\n        max = suppressWarnings(max(x, na.rm = TRUE))\n      )\n    })\n    \n    out <- do.call(rbind, stats)\n    out <- data.frame(Item = names(df_items), out, row.names = NULL, check.names = FALSE)\n    datatable(out, options = list(pageLength = 10, scrollX = TRUE))\n  })\n  \n  output$item_desc_note <- renderText({\n    df <- filtered_data()\n    items <- get_bfi_item_columns(df)\n    if (length(items) == 0) {\n      \"No BFI item columns detected in the current dataset or after filtering.\"\n    } else {\n      \"\"\n    }\n  })\n  \n  output$alpha_text <- renderPrint({\n    df <- filtered_data()\n    scales <- get_bfi_scales(df)\n    items <- scales[[input$scale]]\n    req(length(items) > 0)\n    a <- alpha_safe(df[, items])\n    if (is.null(a)) return(cat(\"Alpha could not be computed (insufficient data).\"))\n    \n    # McDonald's omega (total)\n    omega_val <- try({\n      suppressMessages(suppressWarnings(psych::omega(df[, items], plot = FALSE)$omega.tot))\n    }, silent = TRUE)\n    if (inherits(omega_val, \"try-error\") || is.null(omega_val)) omega_val <- NA_real_\n    \n    cat(sprintf(\"Cronbach's alpha (raw): %.2f\\n\", a$total$raw_alpha))\n    cat(sprintf(\"Standardized alpha: %.2f\\n\", a$total$std.alpha))\n    cat(sprintf(\"Average r (item intercorrelation): %.2f\\n\", a$total$average_r))\n    cat(sprintf(\"G6(smc): %.2f\\n\", a$total$G6.smc))\n    cat(sprintf(\"McDonald's omega (total): %.2f\\n\", omega_val))\n  })\n  \n  \n  output$alpha_table <- renderDT({\n    df <- filtered_data()\n    scales <- get_bfi_scales(df)\n    items <- scales[[input$scale]]\n    req(length(items) > 0)\n    a <- alpha_safe(df[, items])\n    if (is.null(a)) return(datatable(data.frame(Note = \"Insufficient data for reliability\")))\n    tab <- data.frame(\n      Item = rownames(a$item.stats),\n      r_item_total = round(a$item.stats$r.drop, 2),\n      alpha_if_deleted = round(a$alpha.drop$raw_alpha, 2),\n      check.names = FALSE\n    )\n    datatable(tab, options = list(pageLength = 10, scrollX = TRUE))\n  })\n  \n  output$alpha_all_scales <- renderDT({\n    df <- filtered_data()\n    scales <- get_bfi_scales(df)\n    tabs <- purrr::imap_dfr(scales, function(items, nm) {\n      a <- alpha_safe(df[, items])\n      omega_val <- try({\n        suppressMessages(suppressWarnings(psych::omega(df[, items], plot = FALSE)$omega.tot))\n      }, silent = TRUE)\n      if (inherits(omega_val, \"try-error\") || is.null(omega_val)) omega_val <- NA_real_\n      if (is.null(a)) {\n        return(data.frame(\n          Scale = nm, Items = length(items),\n          Raw_Alpha = NA, Std_Alpha = NA, Avg_r = NA, Omega = round(omega_val, 2)\n        ))\n      }\n      data.frame(\n        Scale = nm,\n        Items = length(items),\n        Raw_Alpha = round(a$total$raw_alpha, 2),\n        Std_Alpha = round(a$total$std.alpha, 2),\n        Avg_r = round(a$total$average_r, 2),\n        Omega = round(omega_val, 2)\n      )\n    })\n    datatable(tabs, options = list(pageLength = 5, dom = 'tip'))\n  })\n  \n  \n  output$corr_heat <- renderPlot({\n    df <- filtered_data()\n    items <- get_bfi_item_columns(df)\n    req(length(items) > 1)\n    R <- suppressWarnings(cor(df[, items], use = \"pairwise.complete.obs\"))\n    Rt <- as.data.frame(as.table(R))\n    names(Rt) <- c(\"Item1\", \"Item2\", \"r\")\n    ggplot(Rt, aes(Item1, Item2, fill = r)) +\n      geom_tile() +\n      #geom_text(aes(label = sprintf(\"%.2f\", r))) +\n      scale_fill_gradient2(limits = c(-1, 1)) +\n      theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n      labs(title = \"Item Correlation Heatmap (r)\", x = NULL, y = NULL)\n  })\n  \n  output$scale_hist <- renderPlot({\n    df <- filtered_data()\n    scales <- get_bfi_scales(df)\n    scored <- purrr::imap_dfc(scales, function(items, nm) {\n      score_scale(df[, items])\n    })\n    names(scored) <- names(scales)\n    long <- scored %>% mutate(row = row_number()) %>% pivot_longer(-row, names_to = \"Scale\", values_to = \"Score\")\n    ggplot(na.omit(long), aes(x = Score)) +\n      geom_histogram(bins = 20) +\n      facet_wrap(~ Scale, scales = \"free_y\") +\n      labs(title = \"Scale Score Distributions\", x = \"Mean item score\", y = \"Count\")\n  })\n  \n  # Scatterplot matrix of scale scores (Agreeableness, Conscientiousness, Extraversion, Neuroticism, Openness)\n  output$pairs_scales <- renderPlot({\n    df <- filtered_data()\n    scales <- get_bfi_scales(df)\n    # Score each scale using current filters (auto reverse-key via alpha_safe keys)\n    scored <- purrr::imap_dfc(scales, function(items, nm) score_scale(df[, items]))\n    names(scored) <- names(scales)\n    if (ncol(scored) < 2) return(NULL)\n    pairs(scored,\n          upper.panel = panel.smooth.loess,\n          lower.panel = panel.cor,\n          diag.panel = function(x) {\n            par(new = TRUE)\n            hist(x, main = \"\", xlab = \"\", ylab = \"\", col = \"gray\", border = NA)\n          })\n  })\n  \n  output$download_scores <- downloadHandler(\n    filename = function() \"bfi_scale_scores.csv\",\n    content = function(file) {\n      df <- filtered_data()\n      scales <- get_bfi_scales(df)\n      scores <- purrr::imap_dfc(scales, function(items, nm) score_scale(df[, items]))\n      names(scores) <- names(scales)\n      out <- cbind(df[, intersect(c(\"gender\", \"education\", \"age\"), names(df)), drop = FALSE], scores)\n      write.csv(out, file, row.names = FALSE)\n    }\n  )\n  \n  output$download_reliability <- downloadHandler(\n    filename = function() \"bfi_reliability.csv\",\n    content = function(file) {\n      df <- filtered_data()\n      scales <- get_bfi_scales(df)\n      tabs <- purrr::imap_dfr(scales, function(items, nm) {\n        a <- alpha_safe(df[, items])\n        if (is.null(a)) return(data.frame(Scale = nm, Items = length(items), Raw_Alpha = NA, Std_Alpha = NA, Avg_r = NA))\n        data.frame(Scale = nm, Items = length(items), Raw_Alpha = a$total$raw_alpha,\n                   Std_Alpha = a$total$std.alpha, Avg_r = a$total$average_r)\n      })\n      write.csv(tabs, file, row.names = FALSE)\n    }\n  )\n}\n\nshinyApp(ui, server)\n\n\n# https://hbctraining.github.io/Training-modules/RShiny/lessons/shinylive.html\n\n\n","type":"text"},{"name":"bfi_shiny_app.Rproj","content":"Version: 1.0\n\nRestoreWorkspace: Default\nSaveWorkspace: Default\nAlwaysSaveHistory: Default\n\nEnableCodeIndexing: Yes\nUseSpacesForTab: Yes\nNumSpacesForTab: 2\nEncoding: UTF-8\n\nRnwWeave: Sweave\nLaTeX: pdfLaTeX\n","type":"text"}]
